
# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

### NoDocs ###
GET   /docs/swagger-ui/*file        controllers.Assets.at(path:String="/public/lib/swagger-ui", file:String)

# Map static resources from the /public folder to the /assets URL path
### NoDocs ###
GET   /assets/*file                 controllers.Assets.versioned(path="/public", file: Asset)

# An example controller showing a sample home page

### NoDocs ###
GET     /                           controllers.HomeController.index


# Users and Authentication

###
#  summary: Authenticate user or service
#  description: Authenticates a user or a service
#  tags:
#    - Authentication
#  produces:
#    - application/json
#  parameters:
#    - in: formData
#      name: username
#      required: true
#      type: string
#      example: demouser1
#      default: demouser1
#      description: Username of the user or service
#    - in: formData
#      name: password
#      required: true
#      type: string
#      example: s3cretP4ssword
#      default: s3cretP4ssword
#      description: Password of the user or service
#  responses:
#    200:
#      description: OK
#    401:
#      description: Invalid username or password
###
POST     /login                    controllers.UsersController.login(request: Request)

###
#  summary: Edit toggle and service configuration
#  description: Edits the configuration of the toggles available to each service.
#  tags:
#    - Configurations
#  produces:
#    - application/json
#  parameters:
#    - in: body
#      name: new_config
#      required: true
#      schema:
#        $ref: '#/definitions/Config'
#      description: The configuration for each toggle and the services that are allowed to access it.
#  responses:
#    200:
#      description: OK
#    403:
#      description: You do not have permission to access this endpoint. Only Admins can edit toggle configurations.
#    400:
#      description: New configuration is invalid
###
POST     /config                    controllers.ConfigsController.update(request: Request)

###
#  summary: Fetch toggles for a service and a specific version
#  description: Fetch all toggles available to version "version" of service "service_name".
#  tags:
#    - Services
#  produces:
#    - application/json
#  parameters:
#    - in: path
#      name: service_name
#      required: true
#      type: string
#      example: ABC
#      default: ABC
#      description: Name of the service for whom the current toggle configuration should be fetched
#    - in: path
#      name: version
#      required: true
#      type: string
#      example: 1.0.0
#      default: 1.0.0
#      description: Name of the service for whom the current toggle configuration should be fetched
#  responses:
#    200:
#      description: OK
#    403:
#      description: You have no permission to access this endpoint. You need to authenticate into the system first.
#    404:
#      description: Service with name `name` and version `version` not found.
#    400:
#      description: New service configuration is invalid
###
GET     /service/:service_name/:version                 controllers.ServicesController.getServiceByNameAndVersion(service_name: String, version: String)

###
#  summary: Fetch default toggles for a service, without considering the specific version
#  description: Fetch all toggles available to version "version" of service "service_name".
#  tags:
#    - Services
#  produces:
#    - application/json
#  parameters:
#    - in: path
#      name: service_name
#      required: true
#      type: string
#      example: ABC
#      default: ABC
#      description: Name of the service for whom the current toggle configuration should be fetched
#  responses:
#    200:
#      description: OK
#    403:
#      description: You have no permission to access this endpoint. You need to authenticate into the system first.
#    404:
#      description: Service with name not found.
#    400:
#      description: New service configuration is invalid
###
GET     /service/:service_name                          controllers.ServicesController.getServiceByName(service_name: String)